/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.8.10"
    id("com.diffplug.spotless") version "6.18.0"
    kotlin("plugin.serialization") version "1.8.10"
    id("com.adarshr.test-logger") version "3.2.0"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

val ktorVersion: String = "2.3.0"
val kotlinxVersion: String = "1.7.1"
val kotestVersion: String = "5.6.2"
val logbackVersion: String = "1.4.6"

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    testImplementation(kotlin("test"))

    // This dependency is used internally, and not exposed to consumers on their own compile
    // classpath.

    implementation("org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5")

    implementation("io.github.microutils:kotlin-logging:3.0.5")
    implementation("io.ktor:ktor-serialization-kotlinx:$ktorVersion")
    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxVersion")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinxVersion")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxVersion")
    testImplementation("io.kotest:kotest-runner-junit5:$kotestVersion")
    testImplementation("io.kotest:kotest-assertions-core:$kotestVersion")
    testImplementation("io.kotest:kotest-property:$kotestVersion")
    testImplementation("ch.qos.logback:logback-classic:$logbackVersion")
    testImplementation("io.mockk:mockk:1.13.5")
    testImplementation(kotlin("test"))
    testImplementation("io.kotest.extensions:kotest-extensions-testcontainers:2.0.2")
}

tasks.test { useJUnitPlatform() }

tasks.jar {
    manifest {
        attributes(
            mapOf(
                "Implementation-Title" to project.name,
                "Implementation-Version" to project.version))
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain { languageVersion.set(JavaLanguageVersion.of(11)) }
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        create<MavenPublication>("library") {
            groupId = "com.open200"
            from(components["java"])
        }
    }
}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    //    ratchetFrom("origin/main")

    format("misc") {
        // define the files to apply `misc` to
        target("*.gradle", "*.md", ".gitignore")

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
    kotlin {
        // by default the target is every '.kt' and '.kts` file in the java sourcesets
        ktfmt().dropboxStyle() // we use dropbox Style for 4 spaces in tabs
    }
    kotlinGradle {
        target("*.gradle.kts") // default target for kotlinGradle
        ktfmt().dropboxStyle()
    }
}
